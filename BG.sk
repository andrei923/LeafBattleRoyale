import:
	java.lang.Math
	java.util.Arrays 
	java.util.ArrayList	 	
	org.bukkit.Location
	org.bukkit.Bukkit
	org.bukkit.util.EulerAngle 
	org.bukkit.util.Vector
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType	
	com.fren_gor.packetUtils.events.PacketRetriveEvent
	org.bukkit.event.player.PlayerArmorStandManipulateEvent
	org.bukkit.event.player.PlayerInteractEvent	
	
	
option nms:
    get: 
        set {_nms} to Bukkit.getServer().getClass().getPackage().getName().split("\.")[3]
        return {_nms}

import:
	net.minecraft.server.{@nms}.MojangsonParser
	net.minecraft.server.{@nms}.NBTTagCompound
	org.bukkit.craftbukkit.{@nms}.inventory.CraftItemStack

options:

	#do not touch this -_-
	plugin-version: 0.1.7

	allow-jump-after: 20 # blocks
	

local effect [leaf] send title %string% with subtitle %string% to %players% with %number% fadein and %number% fadeout for %number%:		
	trigger:
		loop exprs-3:
			{bg::cache::TitleManager}.sendTitle(loop-value-1, expr-1, expr-4, expr-5 and expr-6)
			{bg::cache::TitleManager}.sendSubtitle(loop-value-1 and expr-2)

local effect [leaf] send action[ ]bar %string% to %players%:		
	trigger:
		loop exprs-2:
			{bg::cache::TitleManager}.sendActionbar(loop-value-1 and expr-1)
			
local effect create scoreboard for %player%:	
	trigger:
		if {bg::cache::TitleManager}.hasScoreboard(expr-1) is true:
			{bg::cache::TitleManager}.removeScoreboard(expr-1)
		{bg::cache::TitleManager}.giveScoreboard(expr-1)

local effect delete scoreboard of %player%:	
	trigger:
		{bg::cache::TitleManager}.removeScoreboard(expr-1)	

local effect set scoreboard title of %player% to %string%:	
	trigger:
		{bg::cache::TitleManager}.setScoreboardTitle(expr-1 and expr-2)

local effect set scoreboard line %number% of %player% to %string%:	
	trigger:
		{bg::cache::TitleManager}.setScoreboardValue(expr-2, expr-1 and expr-3)

function check_yaml(dir: text, value: text, set: text, type: text = "TEXT"):
	yaml value {_value} from "leaf.bg.%{_dir}%" is not set:
		if {_type} is "text":
			set yaml value {_value} from "leaf.bg.%{_dir}%" to {_set}
		if {_type} is "number":
			set yaml value {_value} from "leaf.bg.%{_dir}%" to {_set} parsed as number
		if {_type} is "boolean":
			set yaml value {_value} from "leaf.bg.%{_dir}%" to {_set} parsed as boolean
	if {_type} is "list":
		yaml list {_value} from "leaf.bg.%{_dir}%" is not set
		loop {_set} split at "||":
			add loop-value to yaml list {_value} from "leaf.bg.%{_dir}%"

expression nbt of %entity%:
    add:
        set {_nbt} to new NBTTagCompound()
        set {_e} to expression-1.getHandle()
        {_e}.c({_nbt})
        set {_nbt2} to MojangsonParser.parse(change value)
        {_nbt}.a({_nbt2})
        {_e}.f({_nbt})	


#From https://forums.skunity.com/resources/mirrorutils.706/ by EWS
local expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}			

on load:
	loop currently loaded yaml files:
		loop-value contains "leaf.bg.config"
		unload yaml loop-value-1
	load yaml "plugins/Battlegrounds/config.yml" as "leaf.bg.config"	
	check_yaml("config", "settings.chat-format", "&3{player} &8» &7{message}")			
	check_yaml("config", "settings.chest.enabled", "true", "boolean")
	check_yaml("config", "settings.chest.min", "3", "number")		
	check_yaml("config", "settings.chest.max", "6", "number")			
	check_yaml("config", "settings.chest.normal-loot", "stone sword||stick||bandage", "list")		
	check_yaml("config", "settings.death-chest.enabled", "true", "boolean")	
	check_yaml("config", "settings.death-chest.extra-items", "golden apple", "list")	
	check_yaml("config", "settings.blocks.allowed-to-place", "normal wood plank", "list")		
	check_yaml("config", "settings.blocks.allowed-to-break", "normal wood plank", "list")			
	check_yaml("config", "settings.items.leave.item", "magma cream")		
	check_yaml("config", "settings.items.leave.name", "&cLeave the game")	
	check_yaml("config", "settings.items.leave.slot", "8", "number")	
	check_yaml("config", "settings.items.bandage.name", "&eBandage")					
	check_yaml("config", "settings.timers.in-lobby", "30", "number")		
	check_yaml("config", "settings.mix.dragon-name", "&eEnder Dragon")	
	check_yaml("config", "settings.scoreboard.name", "&eBATTLE ROYALE")	
	check_yaml("config", "settings.scoreboard.website", "&eplay.my-cool-server.net")		
	check_yaml("config", "messages.join", "&a{player} &ehas joined to the game.")	
	check_yaml("config", "messages.leave", "&a{player} &eleft the game.")
	check_yaml("config", "messages.kill.msg", "&9➜ &a{victim} &7was killed by &a{attacker} &7using &a{tool}")
	check_yaml("config", "messages.kill.action-bar", "&7You killed &c{victim} &7with &e{tool} &7- {players-left} &7left &c{kills} &cKILLS")	
	check_yaml("config", "messages.death", "&9➜ &a{victim} &7died")	
	check_yaml("config", "messages.starting", "&eThe battle starts in &a{seconds} &eseconds")	
	check_yaml("config", "messages.stats", "&e&l✦&7&l&m--------------------------------------&e&l✦||||&8&l»          &6&lBATTLEGROUNDS STATS        &8&l«||||&6&l» &7&lWins &c{Wins}||&6&l» &7&lKills &c{Kills}||&6&l» &7&lPlayedGames &c{PlayedGames}||&6&l» &7&lChests &c{Chest}||&6&l» &7&lDeaths &c{deaths}||||&e&l✦&7&l&m--------------------------------------&e&l✦", "list")		
	check_yaml("config", "messages.summary", "||||||&e✦ &7Battle Royale &e✦||||&aWinner &7- &e{player}||&aKills &7- &e{kills}||||||", "list")			
	save yaml "leaf.bg.config"
	minecraft version contains "1.8":
		set {bg::banner} to "banner" parsed as material
	else:
		set {bg::banner} to "black banner" parsed as material

#Easy setup pls.
function bg_send_arena_status(p: player):
	if {bg::cache::player::setup} is set:
		set {_arena} to {bg::cache::player::setup}
		send "&e&l✦&7&l&m-------------&r &a%{_arena}% &7&l&m------------------&e&l✦" to {_p}
		if {bg::arena::%{_arena}%::lobby} is not set:
			send "&c&l✘ &fLobby is not set, use /bg setarenalobby &e%{_arena}%" to {_p}
		if {bg::arena::%{_arena}%::lobby} is set:		
			send "&a&l✔ &fLobby set." to {_p}
		if {bg::arena::%{_arena}%::center} is not set:
			send "&c&l✘ &fArena center is not set, use /bg setcenter &e%{_arena}%" to {_p}
		if {bg::arena::%{_arena}%::center} is set:		
			send "&a&l✔ &fArena center set." to {_p}
		if {bg::arena::%{_arena}%::border::first} is not set:
			send "&c&l✘ &fArena First border size is not set, use /bg setbodersize &e%{_arena}% &c{size}" to {_p}
		if {bg::arena::%{_arena}%::border::first} is set:		
			send "&a&l✔ &fArena First border size is set." to {_p}		
		if size of {bg::arena::%{_arena}%::borders::*} = 0:
			send "&c&l✘ &fArena has no border locations add some using /bg add-border &e%{_arena}%" to {_p}
		else:	
			send "&a&l✔ &fArena has border location(s). &a(%size of {bg::arena::%{_arena}%::borders::*}%)" to {_p}
		if {bg::arena::%{_arena}%::start::1} and {bg::arena::%{_arena}%::end::1} is not set:
			send "&c&l✘ &fArena has no plane route use /bg set-route-start &e%{_arena}%" to {_p}
			send "&f/bg set-route-end &e%{_arena}% &fand /bg save-route &e%{_arena}%" to {_p}
		if {bg::arena::%{_arena}%::start::1} and {bg::arena::%{_arena}%::end::1} is set:
			send "&a&l✔ &fArena route(s) set. &a(%size of {bg::arena::%{_arena}%::start::*}%&a)" to {_p}
		if {bg::arena::%{_arena}%::minplayers} is set:		
			send "&a&l✔ &fArena min players set." to {_p}
		if {bg::arena::%{_arena}%::minplayers} is not set:		
			send "&c&l✘ &fArena min players is not set, use /bg setminplayers &e%{_arena}% (number)" to {_p}	
		if {bg::arena::%{_arena}%::maxplayers} is set:		
			send "&a&l✔ &fArena max players set." to {_p}
		if {bg::arena::%{_arena}%::maxplayers} is not set:		
			send "&c&l✘ &fArena max players is not sett, use /bg setmaxplayers &e%{_arena}% (number)" to {_p}							
		send "&fTo save arena use &a/bg savearena &e%{_arena}%" to {_p}
		send "&e&l✦&7&l&m------------------------------------&e&l✦" to {_p}		


function bg_set_banner(p: player, side: text):
	set {_uuid} to uuid of {_p}
	open chest inventory with 2 rows named "&3Banner for &e%{_side}% &3side" to {_p}	
	set {_slot} to 0				
	wait a tick
	loop "Black", "Red", "Dark Green", "Brown", "Blue", "Purple", "Cyan", "Gray", "Pink", "Light Green", "Yellow", "Light Blue", "Magenta", "Orange" and "White":
		minecraft version contains "1.8" or "1.9" or "1.10" or "1.11" or "1.12":
			set {_banner} to "%loop-value% banner item" parsed as material
		else:
			set {_banner} to "%loop-value% banner" parsed as material
		make a gui slot {_slot} of {_p} with {_banner} named "&8&l» <%loop-value%>%loop-value% Banner" to run:
			set {bg::stats::BANNER::%{_side}%::%{_uuid}%} to {_banner}
			send "&aBanner set for &e%{_side}% &aside"
			close {_p}'s inventory
		make a gui slot 17 of {_p} with {bg::banner} named "&8&l» &eRandom" to run:			
			delete {bg::stats::BANNER::%{_side}%::%{_uuid}%}
			send "&aBanner set for &e%{_side}% &aside"
			close {_p}'s inventory	
		add 1 to {_slot}	

command battlegrouns [<text = help>] [<text>] [<text>] [<number>]:
	aliases: bg
	executable by: players
	trigger:
		if arg 1 is "help":
			if player has permission "bg.player":
				send "&8&l[&7&l----------&8[ &6&lBATTLEGROUNDS &8]&7&l----------&8&l]"
				send "&a/bg list"
				send "&a/bg join &8(&7arena_name&8)"
				send "&a/bg parachute"				
				send "&a/bg autojoin"
				send "&a/bg leave"
				send "&7&l------------------------------------&8&l]"
			if player has permission "bg.admin":
				send "&7/bg setlobby"			
				send "&7/bg start"				
				send "&7/bg resetstats &8(&7player_name&8)"				
				send "&7/bg createarena &8(&7arena_name&8)"			
				send "&7/bg setarenalobby &8(&7arena_name&8)"
				send "&7/bg setminplayers &8(&7arena_name&8) &8(&7number&8)"
				send "&7/bg setmaxplayers &8(&7arena_name&8) &8(&7number&8)"	
				send "&7/bg setcenter &8(&7arena_name&8)"	
				send "&7/bg add-border &8(&7arena_name&8)"									
				send "&7/bg remove-border &8(&7arena_name&8)"					
				send "&7/bg setbordersize &8(&7arena_name&8)"									
				send "&7/bg set-route-start &8(&7arena_name&8)"							
				send "&7/bg set-route-end &8(&7arena_name&8)"	
				send "&7/bg save-route &8(&7arena_name&8)"								
				send "&7/bg remove-route &8(&7arena_name&8)"												
				send "&7/bg savearena &8(&7arena_name&8)"							
				send "&7/bg deletearena &8(&7arena_name&8)"	
				send "&7/bg chest add &8(&7hold the item)"				
				send "&7/bg chest remove &8(&7hold the item)"		
				send "&7/bg chest rename &8(&7hold the item)"															
				send "&7&l-----------------------------------"
				stop
		if arg 1 is "join":		
			bg_join(player, arg-2)
		if arg 1 is "list":		
			if {bg::cache::player::%player%::state} is not set:	
				open chest inventory with 6 rows named "&8&l» &7Battle Royale Arenas" to player
				wait a tick	
				set {_slot} to 10						
				loop {bg::arenas::*}:
					if {bg::arena::%loop-value%::cache::status} is "WAITING":
						set {_status} to "&aWaiting"
					if {bg::arena::%loop-value%::cache::status} is "STARTING":
						set {_status} to "&6Starting"	
					if {bg::arena::%loop-value%::cache::status} is "FLYING":
						set {_status} to "&9Flying"		
					if {bg::arena::%loop-value%::cache::status} is "INGAME":
						set {_status} to "&9Flying"	
					if {bg::arena::%loop-value%::cache::status} is "RESTARTING":
						set {_status} to "&cRestarting"		
					set {_item} to green clay named "&8» &7Arena: &e%loop-value%"
					set line 1 of {_item}'s lore to "&8▪ &7Status: &e%{_status}%"	
					set line 2 of {_item}'s lore to "&8▪ &7Playing: &e%size of {bg::arena::%loop-value%::cache::ninjas::*}%"																				
					make a gui slot {_slot} of player with {_item} to run function bg_join(player, loop-value-1)
					add 1 to {_slot}
					if {_slot} is 17 or 26 or 35:
						add 2 to {_slot}
		if arg 1 is "chest":
			if player has permission "bg.admin":	
				if arg-2 is "add":
					if player's tool is not air:
						add player's tool to yaml list "settings.chest.custom-loot" from "leaf.bg.config"
						send "&aItem added."
						save yaml "leaf.bg.config" 	
				if arg-2 is "remove":
					if player's tool is not air:
						remove player's tool from yaml list "settings.chest.custom-loot" from "leaf.bg.config"
						send "&aItem removed."
						save yaml "leaf.bg.config" 	
				if arg-2 is "rename":
					if player's tool is not air:
						set name of player's tool to colored arg-3									
		if arg 1 is "parachute":
			open virtual hopper inventory with 1 rows named "&8&l» &7Select Side" to player	
			wait a tick
			if {bg::stats::BANNER::left::%uuid of player%} is set:
				make a gui slot 0 of player with {bg::stats::BANNER::left::%uuid of player%} named "&8&l» &7Left Side" to run function bg_set_banner(player, "left")
			if {bg::stats::BANNER::left::%uuid of player%} is not set:
				make a gui slot 0 of player with {bg::banner} named "&8&l» &7Left Side" to run function bg_set_banner(player, "left")
			make a gui slot 2 of player with fence gate named "&7¯\_(ツ)_/¯" to do nothing
			if {bg::stats::BANNER::right::%uuid of player%} is set:
				make a gui slot 4 of player with {bg::stats::BANNER::right::%uuid of player%} named "&8&l» &7Left Side" to run function bg_set_banner(player, "right")
			if {bg::stats::BANNER::right::%uuid of player%} is not set:
				make a gui slot 4 of player with {bg::banner} named "&8&l» &7Right Side" to run function bg_set_banner(player, "right")				
		if arg 1 is "leave":	
			bg_leave(player)
		if arg 1 is "autojoin":		
			if {bg::cache::player::%player%::state} is not set:
				loop {bg::arenas::*}:
					if {bg::arena::%loop-value%::cache::status} is "WAITING" or "STARTING":
						bg_join(player, loop-value)
						stop
		if arg-1 is "stats":
			loop yaml list "messages.stats" from "leaf.bg.config":
				set {_msg} to loop-value-1
				loop "Kills", "Wins", "Deaths", "PlayedGames" and "Chests":
					replace all "{%loop-value-2%}" with "%{bg::stats::%loop-value-2%::%uuid of player%}%" in {_msg}
				send colored {_msg} to player
		if arg 1 is "createarena":	
			if player has permission "bg.admin":		
				if arg-2 is set:
					if {bg::arena::%arg-2%::state} is not set:
						set {bg::arena::%arg-2%::state} to "created"
						set {bg::cache::player::setup} to arg-2
						bg_send_arena_status(player)
						send "&aArena &c%arg-2% &ahas been created!"
					else:
						send "&aThis arena already exists!"	
				else:
					send "&aSpecify Arena!"				
		if arg 1 is "setarenalobby":
			if player has permission "bg.admin":		
				if {bg::arena::%arg-2%::state} is "created" or "ready":
					set {bg::arena::%arg-2%::lobby} to location of player
					bg_send_arena_status(player)
					send "&aLobby for Arena &3%arg-2% &ahas been set!"						
				else:
					send "&aThis arena not exists"		
		if arg 1 is "setmaxplayers" or "setminplayers":
			if player has permission "bg.admin":		
				if {bg::arena::%arg-2%::state} is "created" or "ready":
					set {_type} to arg-1
					replace all "set" with "" in {_type}
					set {bg::arena::%arg-2%::%{_type}%} to arg-3 parsed as number
					bg_send_arena_status(player)
					replace all "maxplayers" with "Max Players" in {_type}
					replace all "minplayers" with "Min Players" in {_type}
					send "&a%{_type}% for Arena &3%arg-2% &ahas been set!"						
				else:
					send "&aThis arena not exists"																
		if arg 1 is "setlobby":	
			if player has permission "bg.admin":
				set {bg::lobby} to location of player
				send "&aLobby set."	
		if arg 1 is "set-route-start":	
			if player has permission "bg.admin":
				if arg-2 is set:
					if {bg::arena::%arg-2%::route::id} is not set:
						set {bg::arena::%arg-2%::route::id} to 1
					set {bg::arena::%arg-2%::start::%{bg::arena::%arg-2%::route::id}%} to location of player
					send "&aStart with id &e&n%{bg::arena::%arg-2%::route::id}%&r &aset."
		if arg 1 is "set-route-end":	
			if player has permission "bg.admin":
				if arg-2 is set:				
					if {bg::arena::%arg-2%::route::id} is not set:
						set {bg::arena::%arg-2%::route::id} to 1
					set {bg::arena::%arg-2%::end::%{bg::arena::%arg-2%::route::id}%} to location of player
					send "&aEnd with id &e&n%{bg::arena::%arg-2%::route::id}%&r &aset."	
		if arg 1 is "save-route":	
			if player has permission "bg.admin":
				if arg-2 is set:				
					if {bg::arena::%arg-2%::route::id} is set:
						if {bg::arena::%arg-2%::start::%{bg::arena::%arg-2%::route::id}%} and {bg::arena::%arg-2%::end::%{bg::arena::%arg-2%::route::id}%} is set:
							bg_send_arena_status(player)
							send "&aRoute with id &e&n%{bg::arena::%arg-2%::route::id}%&r&a saved."	
							add 1 to {bg::arena::%arg-2%::route::id}	
		if arg 1 is "remove-route":	
			if player has permission "bg.admin":
				if arg-2 is set:				
					if {bg::arena::%arg-2%::route::id} is set:
						if {bg::arena::%arg-2%::route::id} = 0:
							stop
						delete {bg::arena::%arg-2%::start::%{bg::arena::%arg-2%::route::id}%} and {bg::arena::%arg-2%::end::%{bg::arena::%arg-2%::route::id}%}
						bg_send_arena_status(player)
						send "&aDeleted route with id &e&n%{bg::arena::%arg-2%::route::id}%&r&a."
						remove 1 from {bg::arena::%arg-2%::route::id}	
		if arg 1 is "add-border":	
			if player has permission "bg.admin":
				if arg-2 is set:				
					if {bg::arena::%arg-2%::border-id} is not set:
						set {bg::arena::%arg-2%::border-id} to 1
					set {bg::arena::%arg-2%::borders::%{bg::arena::%arg-2%::border-id}%} to location of player
					bg_send_arena_status(player)
					send "&aAdded border with id &e&n%{bg::arena::%arg-2%::border-id}%&r&a to arena &e&n%arg-2%&r&a."	
					add 1 to {bg::arena::%arg-2%::border-id}	
		if arg 1 is "remove-border":	
			if player has permission "bg.admin":
				if arg-2 is set:				
					if {bg::arena::%arg-2%::border-id} is set:
						delete {bg::arena::%arg-2%::borders::%{bg::arena::%arg-2%::border-id}%} and {bg::arena::%arg-2%::borders::%{bg::arena::%arg-2%::border-id}%}
						bg_send_arena_status(player)
						remove 1 from {bg::arena::%arg-2%::border-id::id}	
						send "&aRemoved border with id &e&n%{bg::arena::%arg-2%::border-id}%&r&a from arena &e&n%arg-2%&r&a."	
					else:
						send "&cNo borders locations found."					
		if arg 1 is "setcenter":	
			if player has permission "bg.admin":
				set {bg::arena::%arg-2%::center} to location of player
				bg_send_arena_status(player)
				send "&aCenter for Arena &b%arg-2% &ahas been set!"		
		if arg 1 is "setbordersize":	
			if player has permission "bg.admin":
				arg-2 is set
				arg-3 is set
				set {bg::arena::%arg-2%::border::first} to arg-3 parsed as number
				bg_send_arena_status(player)
				send "&aFirst Border for Arena &b%arg-2% &ahas been set to &b%arg-3%!"													
		if arg 1 is "resetstats":	
			if player has permission "bg.admin":		
				set {_p} to arg-2 parsed as player
				bg_stats("reset", {_p})
				send "&cReseted Stats for &a%{_p}%"						
		if arg 1 is "start":
			if player has permission "bg.admin":
				if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "WAITING" or "STARTING":
					bg_start({bg::cache::player::%player%::arena})
		if arg 1 is "reload":		
			if player has permission "bg.admin":
				broadcast "&aReloading..."
				wait a tick
				make console execute command "sk reload %script%"
		if arg 1 is "savearena":	
			if player has permission "bg.admin":		
				if {bg::arena::%arg-2%::state} is "created":
					if {bg::arena::%arg-2%::lobby} is set:		
						if {bg::arena::%arg-2%::start::1} is set:
							if {bg::arena::%arg-2%::end::1} is set:							
								if {bg::arena::%arg-2%::center} is set:	
									if {bg::arena::%arg-2%::maxplayers} is set:	
										if {bg::arena::%arg-2%::minplayers} is set:	
											if size of {bg::arena::%arg-2%::borders::*} > 0:
												set {bg::arena::%arg-2%::state} to "ready"
												add arg-2 to {bg::arenas::*}
												send "&aArena &c%arg-2% &ahas been saved."
												bg_resetarena(arg-2)	
											else:
												send "&aNo borders added."
										else:
											send "&aMin players not set!"												
									else:
										send "&aMax players not set!"									
								else:
									send "&aCenter is not set!"										
							else:
								send "&aEnd point is not set"											
						else:
							send "&aStart point is not set"																			
					else:
						send "&aLobby is not set!"						
				else:
					send "&aThis arena not exists"
		if arg 1 is "debug":	
			if player has permission "bg.admin":
				send "&fArena: &a%{bg::cache::player::%player%::arena}%"	
				send "&fStatus: &a%{bg::arena::%{bg::cache::player::%player%::arena}%::cache::status}%"	
				send "&fPlayers: &a%size of {bg::arena::%{bg::cache::player::%player%::arena}%::cache::ninjas::*}%"		
		if arg 1 is "deletearena":	
			if player has permission "bg.admin":		
				if {bg::arena::%arg-2%::state} is set:
					bg_resetarena(arg-2)
					delete {bg::arena::%arg-2%::*}							
					remove arg-2 from {bg::arenas::*}
					send "&aArena &c%arg-2% &ahas been deleted."
				else:
					send "&aThis arena not exists"
	
on PlayerArmorStandManipulateEvent:
	if {bg::cache::player::%event.getPlayer()%::state} is set:	
		cancel event

on PlayerInteractEvent:
	if {bg::cache::player::%event.getPlayer()%::state} is set:	
		if "%event.getAction()%" is "PHYSICAL":
			cancel event
	
on chat:
	if {bg::cache::player::%player%::state} is set:
		cancel event
		send replacer "{player}" and "{message}" with "%player%" and message in yaml value "settings.chat-format" from "leaf.bg.config" to {bg::arena::%{bg::cache::player::%player%::arena}%::cache::ninjas::*}

on drop:
	if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "STARTING" or "WAITING":
		cancel event

on dismount:
	if distance between {bg::arena::%{bg::cache::player::%player%::arena}%::start::%{bg::arena::%{bg::cache::player::%player%::arena}%::ROUTE}%} and player > {@allow-jump-after}:
		metadata value "BG-FLYING" of player is set
		bg_parachute(player)	
		stop
	wait a tick
	if player is riding:
		stop
	metadata value "BG-PARACHUTE" of player is set:
		wait a tick
		loop chickens in radius 5 of player:
			metadata value "BG-OWNER" of loop-entity is "%player%"
			make player ride loop-entity
			stop
	loop chickens in radius 5 of player:
		metadata value "BG-PLANE" of loop-entity is "%player%"
		make player ride loop-entity

on PacketRetriveEvent:
	if "%event.getPacketName()%" is "PacketPlayInSteerVehicle":
		metadata value "BG-PARACHUTE" of event.getPlayer() is set:
			event.setCancelled(true)
		metadata value "BG-FLYING" of event.getPlayer() is set:
			if distance between {bg::arena::%{bg::cache::player::%event.getPlayer()%::arena}%::start::%{bg::arena::%{bg::cache::player::%event.getPlayer()%::arena}%::ROUTE}%} and event.getPlayer() < {@allow-jump-after}:
				event.setCancelled(true)		

on right click on chest or trapped chest:	
	if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "INGAME" or "FLYING":	
		if yaml value "settings.chest.enabled" from "leaf.bg.config" is true:	
			if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::CHESTS::%location of event-block%} is not set:
				clear inventory of block at event-block
				set {_items} to random number between yaml value "settings.chest.min" from "leaf.bg.config" and yaml value "settings.chest.max" from "leaf.bg.config"
				set {_loot::*} to {bg::cache::chestItems::cache::*}	
				loop rounded {_items} times:
					set {_slot} to rounded random number between 0 and 26
					set {_item} to random element out of {_loot::*}
					remove {_item} from {_loot::*}
					add {_item} to slot {_slot} of event-block
				add 1 to {bg::stats::Chests::%uuid of player%}
				set {bg::arena::%{bg::cache::player::%player%::arena}%::cache::CHESTS::%location of event-block%} to location of event-block
					
on hunger bar change:	
	if {bg::cache::player::%player%::state} is "IN-GAME":
		if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "STARTING" or "WAITING":
			set player's hunger to 20
		
function bg_death_chest(p: player, arena: text):
	if yaml value "settings.death-chest.enabled" from "leaf.bg.config" is true:
		set {_helmet} to {_p}'s helmet		
		set {_chestplate} to {_p}'s chestplate
		set {_leggings} to {_p}'s leggings
		set {_boots} to {_p}'s boots	
		loop blocks in radius 1 of {_p}:
			loop-block is air
			set loop-block to chest
			set {bg::arena::%{_arena}%::cache::CHESTS::%location of loop-block%} to location of loop-block
			add {_helmet}, {_chestplate}, {_leggings} and {_boots} to loop-block
			loop items in {_p}'s inventory:
				add loop-item to loop-block
			loop yaml list "settings.death-chest.extra-items" from "leaf.bg.config":
				set {_extra} to loop-value-2
				add {_extra} parsed as material to loop-block
			add location of loop-block to {bg::arena::%{_arena}%::cache::KILL-ME-PLS::*}
			stop
		loop items in {_p}'s inventory:
			drop loop-item at {_p}
	if yaml value "settings.death-chest.enabled" from "leaf.bg.config" is false:
		loop items in {_p}'s inventory:
			drop loop-item at {_p}	

function bg_player_death(p: player, killer: text = "null"):
	set {_uuid} to uuid of {_p}
	set {_arena} to {bg::cache::player::%{_p}%::arena}
	set {_players-left} to size of {bg::arena::%{_arena}%::cache::ninjas::*}
	bg_death_chest({_p}, {_arena})
	bg_remove({_p}, {_arena})
	create lightning effect at {_p}
	add {_p} to {bg::arena::%{_arena}%::cache::bad-ninjas::*}
	add 1 to {bg::stats::Deaths::%{_uuid}%}
	set {_p}'s gamemode to spectator
	send title "&e&l##%size of {bg::arena::%{_arena}%::cache::ninjas::*}+1% &c&lGAME OVER" with subtitle "&eBATTLE ROYALE" to {_p} with 10 fadein and 10 fadeout for 70
	if {_killer} != "null":
		set {_killer} to {_killer} parsed as player
		if {_killer} is not {_p}:
			set {_uuid} to uuid of {_killer}
			add 1 to {bg::stats::Kills::%{_uuid}%}
			add 1 to {bg::cache::player::%{_killer}%::kills}
			if {_killer}'s tool is set:
				set {_display} to name of {_killer}'s tool
				set {_display} to first element of {_display} split at " of " 
				replace all "_" with " " in {_display}
			else:
				set {_display} to "Unknown"
			set {_bar} to replacer "{victim}", "{players-left}", "{kills}", "{tool}" and "{attacker}" with {_p}'s display name, "%{_players-left}%", "%{bg::cache::player::%{_killer}%::kills}%", "%{_display}%" and {_killer}'s display name in yaml value "messages.kill.action-bar" from "leaf.bg.config"
			set {_msg} to replacer "{victim}", "{players-left}", "{kills}", "{tool}" and "{attacker}" with {_p}'s display name, "%{_players-left}%", "%{bg::cache::player::%{_killer}%::kills}%", "%{_display}%" and {_killer}'s display name in yaml value "messages.kill.msg" from "leaf.bg.config"
			send {_msg} to {bg::arena::%{_arena}%::cache::ninjas::*}
			send action bar "%{_bar}%" to {_killer} 
		else:
			send replacer "{victim}" with {_p}'s display name in yaml value "messages.death" from "leaf.bg.config" to {bg::arena::%{_arena}%::cache::ninjas::*}			
	else:
		send replacer "{victim}" with {_p}'s display name in yaml value "messages.death" from "leaf.bg.config" to {bg::arena::%{_arena}%::cache::ninjas::*}

on damage of player:
	if {bg::cache::player::%victim%::state} is "IN-GAME":
		if {bg::arena::%{bg::cache::player::%victim%::arena}%::cache::status} is "STARTING" or "WAITING":
			cancel event
			damage cause is void
			teleport victim to {bg::arena::%{bg::cache::player::%victim%::arena}%::lobby}
		if {bg::arena::%{bg::cache::player::%victim%::arena}%::cache::status} is "INGAME" or "FLYING":
			if damage >= health of victim:
				cancel event
				if attacker is set:
					bg_player_death(victim, "%attacker%")
				else:
					bg_player_death(victim)					
		if {bg::arena::%{bg::cache::player::%victim%::arena}%::cache::status} is "RESTARTING":				
			cancel event	
						
function bg_remove(p: player, arena: text):
	remove {_p} from {bg::arena::%{_arena}%::cache::ninjas::*}
	if {bg::arena::%{_arena}%::cache::status} is "INGAME" or "FLYING" or "RESTARTING":	
		size of {bg::arena::%{_arena}%::cache::ninjas::*} is 1:
			set {bg::arena::%{_arena}%::cache::status} to "RESTARTING"
			bg_delete_arena_entities({_arena})
			loop {bg::arena::%{_arena}%::cache::ninjas::*}:
				set {_p} to loop-value-1
			send title "&e&l##1 &a&lYOU WON" with subtitle "&eBATTLE ROYALE" to {_p} with 10 fadein and 10 fadeout for 80
			loop yaml list "messages.summary" from "leaf.bg.config":
				set {_msg} to loop-value-1
				replace all "{player}" with "%{_p}%" in {_msg}
				replace all "{kills}" with "%{bg::cache::player::%{_p}%::kills}%" in {_msg}
				send message centered colored {_msg} to {bg::arena::%{_arena}%::cache::ninjas::*} and {bg::arena::%{_arena}%::cache::bad-ninjas::*}
			set {_uuid} to uuid of {_p}
			add 1 to {bg::stats::Wins::%{_uuid}%}
			loop 10 times:
				if {bg::cache::player::%{_p}%::state} is "IN-GAME":
					launch "BALL" firework at location of {_p} timed 1 coloured "RED" and "BLUE" AND "YELLOW" AND "GREEN"
					wait a second				
			bg_resetarena({_arena})

on load:
	delete {bg::cache::*}
	loop "place" and "break":
		loop yaml list "settings.blocks.allowed-to-%loop-value-1%" from "leaf.bg.config":
			set {_block} to loop-value-2
			if {_block} parsed as material is set:
				add {_block} to {bg::arena::blocks-to-%loop-value-1%::cache::*}
			else:
				broadcast "BG: item %loop-value-2% from block to %loop-value-1% is invalid."
		wait a tick
	loop yaml list "settings.chest.normal-loot" from "leaf.bg.config":
		if loop-value-1 != "bandage":
			add "%loop-value-1%" parsed as material to {bg::cache::chestItems::cache::*}
		if loop-value-1 = "bandage":	
			add paper named yaml value "settings.items.bandage.name" from "leaf.bg.config" to {bg::cache::chestItems::cache::*}
	add yaml list "settings.chest.custom-loot" from "leaf.bg.config" to {bg::cache::chestItems::cache::*} 			
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aLoading &ev.{@plugin-version}&a..." to console
	broadcast "&aBattle Royale loaded!"
	send " " to console
	send "&7&l--------------------------------------------" to console
	loop {bg::arenas::*}:
		if {bg::arena::%loop-value%::maxplayers} is not set:
			set {bg::arena::%loop-value%::maxplayers} to 100
		if {bg::arena::%loop-value%::minplayers} is not set:
			set {bg::arena::%loop-value%::maxplayers} to 2			
		delete {bg::arena::%loop-value-1%::cache::ninjas::*} and {bg::arena::%loop-value-1%::cache::bad-ninjas::*}
		bg_resetarena(loop-value-1)
		loop numbers between 1 and {bg::arena::%loop-value-1%::route::id}:
			{bg::arena::%loop-value-1%::start::%rounded loop-value-2%} is set
			set y-coords of {bg::arena::%loop-value-1%::start::%rounded loop-value-2%} to y-coords of {bg::arena::%loop-value-1%::end::%rounded loop-value-2%}		
	set {bg::cache::TitleManager} to Bukkit.getServer().getPluginManager().getPlugin("TitleManager")		

on unload:
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aDisabling &ev.{@plugin-version}&a..." to console
	send "&ev.{@plugin-version} &adisabled!" to console
	send " " to console
	send "&7&l--------------------------------------------" to console


function bg_stats(do: text, p: player):
	set {_uuid} to uuid of {_p}
	{_do} is "check":
		loop "Kills", "Wins", "Deaths", "PlayedGames" and "Chests":
			{bg::stats::%loop-value%::%{_uuid}%} is not set
			set {bg::stats::%loop-value%::%{_uuid}%} to 0
	{_do} is "reset":
		loop "Kills", "Wins", "Deaths", "PlayedGames" and "Chests":
			set {bg::stats::%loop-value%::%{_uuid}%} to 0	
	
function bg_leave(p: player):
	if {bg::cache::player::%{_p}%::state} is set:
		if {bg::cache::player::%{_p}%::state} is "IN-GAME":
			set {_arena} to {bg::cache::player::%{_p}%::arena}
			bg_remove({_p}, {_arena})
			if size of {bg::arena::%{_arena}%::cache::ninjas::*} = 0:
				if {bg::arena::%{_arena}%::cache::status} is not "RESTARTING":
					bg_resetarena({_arena})
			send replacer "{player}" with {_p}'s display name in yaml value "messages.leave" from "leaf.bg.config" to {bg::arena::%{bg::cache::player::%{_p}%::arena}%::cache::ninjas::*}		
		loop "arena" and "state" and "bandaging":
			delete {bg::cache::player::%{_p}%::%loop-value%}	
		bg_clear_player({_p})
		delete scoreboard of {_p}
		teleport {_p} to {bg::lobby}		
		
function bg_join(p: player, arena: text):	
	if {bg::cache::player::%{_p}%::state} is not set:
		if {bg::arena::%{_arena}%::state} is "ready":
			if {bg::arena::%{_arena}%::cache::status} is "WAITING" or "STARTING":
				if size of {bg::arena::%{_arena}%::cache::ninjas::*} < {bg::arena::%{_arena}%::maxplayers}:
					bg_clear_player({_p})
					set {bg::cache::player::%{_p}%::state} to "IN-GAME"
					set {bg::cache::player::%{_p}%::arena} to {_arena}
					set {bg::cache::player::%{_p}%::kills} to 0
					set slot yaml value "settings.items.leave.slot" from "leaf.bg.config" of {_p} to yaml value "settings.items.leave.item" from "leaf.bg.config" parsed as material named yaml value "settings.items.leave.name" from "leaf.bg.config"
					add {_p} to {bg::arena::%{_arena}%::cache::ninjas::*}		
					if size of {bg::arena::%{_arena}%::cache::ninjas::*} = {bg::arena::%{_arena}%::minplayers}:
						bg_start_countdown({_arena})											
					send replacer "{player}" and "{players-count}" with {_p}'s display name and "%size of {bg::arena::%{_arena}%::cache::ninjas::*}%" in yaml value "messages.join" from "leaf.bg.config" to {bg::arena::%{_arena}%::cache::ninjas::*}
					teleport {_p} to {bg::arena::%{_arena}%::lobby}
					bg_createBoard({_p}, "BG-WAITING", 9)
				else:
					send "&7This arena is full" to {_p}
			else:
				send "&7This game is running" to {_p}
		else:
			send "&7This arena not exists" to {_p}
	else:
		send "&7You are already playing." to {_p}
					
on join:
	bg_stats("check", player)
		
on right click:
	if {bg::cache::player::%player%::state} is set:
		name of event-item is yaml value "settings.items.leave.name" from "leaf.bg.config":
			cancel event
			bg_leave(player)
		if event-item = paper named yaml value "settings.items.bandage.name" from "leaf.bg.config":
			if {bg::cache::player::%player%::bandaging} is not set:
				set {bg::cache::player::%player%::bandaging} to true
				set {_bandage} to event-item
				send "&7Bandaging... do not move"
				set {_loc} to location of player
				while player's tool is {_bandage}:
					if distance between {_loc} and player > 0.5:
						delete {bg::cache::player::%player%::bandaging}
						send "&c&7Bandaging canceled"
						stop
					add 5 to {_timer}	
					send action bar "&7Bandaging... &e%{_timer}%/100" to player
					if {_timer} = 1*{_timer}:
						play sound "DRINK" to player with volume 1 and pitch 1
					if {_timer} = 100:
						delete {bg::cache::player::%player%::bandaging}
						remove 1 of {_bandage} from player
						heal player
						send "&aBandage used"
					wait 8 ticks

on quit:
	if {bg::cache::player::%player%::state} is set:
		bg_leave(player)
	delete scoreboard of player	

on entity target:
	metadata value "BG-PLANE" of event-entity is set:
		cancel event

on damage of entity:
	metadata value "BG-PLANE" of victim is set:
		cancel event
	metadata value "BG-OWNER" of victim is set:
		cancel event
	metadata value "BG-FLYING" of victim is set:
		cancel event
	metadata value "BG-PARACHUTE" of victim is set:
		cancel event

function bg_delete_arena_entities(arena: text):
	set {_w} to {bg::arena::%{_arena}%::center}'s world
	loop ...{_w}.getEntities():
		loop-value != player
		loop-value.remove()		

function bg_load_chunks(loc: location):
	set {_pos} to {_loc}
	set z-coordinate of {_pos} to z-coordinate of {_loc} - 16 * 4
	loop 2 * 4 + 1 times:
		set x-coordinate of {_pos} to x-coordinate of {_loc} - 16 * 4
		loop 2 * 4 + 1 times:
			{_pos}.getChunk().load()
			add 16 to x-coordinate of {_pos}
		add 16 to z-coordinate of {_pos}
		
function bg_player_track_plane2(p: player, arena: text, base: entity, plane: entity):
	while {bg::arena::%{_arena}%::cache::status} is "FLYING":
		set {_loc} to location of {_plane}
		add 10 to y-coords of {_loc}
		set velocity of {_base} to vector between {_base} and {_loc}		
		wait a tick	

function bg_player_track_plane(p: player, arena: text, start: location, plane: entity):
	add 180 to yaw of {_start}
	teleport {_p} to {_start}
	wait a tick
	loop 10 times:
		set {_loc} to location of {_plane}
		add 5 to y-coords of {_loc}
		set pitch of {_loc} to pitch of {_p}
		set yaw of {_loc} to yaw of {_p}
		teleport {_p} to {_loc}
		wait a tick			
	set {_p}'s gamemode to survival
	spawn 1 chicken at {_plane}
	set {_base} to spawned chicken
	add "{Silent:1,NoGravity:1b}" to nbt of {_base}
	apply invisibility without any particles to {_base} for 7 days
	set metadata value "BG-FLYING" of {_p} to true
	set metadata value "BG-PLANE" of {_base} to {_p}
	bg_player_track_plane2({_p}, {_arena}, {_base}, {_plane})
	loop 10 times:
		if {_p}'s vehicle is not set:
			make {_p} ride {_base}
		wait a tick

function bw_border_closing(arena: text, time: number):
	set {bg::arena::%{_arena}%::cache::next-border} to "&cBORDER CLOSING"
	set {_w} to {bg::arena::%{_arena}%::center}'s world
	{_w}.getWorldBorder().setSize({bg::arena::%{_arena}%::cache::border::current-size} and {_time})
	loop {_time} times:
		if {bg::arena::%{_arena}%::cache::status} is "FLYING" or "INGAME":
			wait a second
		else:
			stop
	bg_start_border({_arena})

on explode:
	metadata value "BG-PLANE" of event-entity is set:
		cancel event

function bg_start_border(arena: text):
	set {_time_machine} to 1
	set {_time_machine2} to 60
	while {bg::arena::%{_arena}%::cache::status} is "FLYING" or "INGAME":
		remove 1 from {_time_machine2}
		if {_time_machine2} = 0:
			if {_time_machine} = 0:
				set {bg::arena::%{_arena}%::cache::border::current-size} to {bg::arena::%{_arena}%::cache::border::current-size}/2
				bw_border_closing({_arena}, 120)
				stop
			set {_time_machine2} to 60
			remove 1 from {_time_machine}
		if {_time_machine2} < 10:
			set {_mark2} to 0
		else:
			set {_mark2} to ""					
		if {_time_machine} < 10:
			set {_mark1} to 0
		else:
			set {_mark1} to ""			
		set {bg::arena::%{_arena}%::cache::next-border} to "%{_mark1}%%{_time_machine}%:%{_mark2}%%{_time_machine2}%"
		wait a second

function plane_start_route(arena: text, plane: entity, start: location, end: location):
	#set {_direction} to {_start}.toVector().subtract({_end}.toVector())
	set {_oldY} to y-coords of {_start}
	set {_dir} to {_end}.getDirection()
	while {bg::arena::%{_arena}%::cache::status} is "FLYING":
		{_start}.getChunk().load()
		{_dir}.multiply(1)
		{_start}.add({_dir})
		{_dir}.normalize()	
		#
		set {_vector} to vector from {_end} to {_plane}
		set yaw of {_start} to vector yaw of {_vector}-11
		set pitch of {_start} to vector pitch of {_vector}
		#
		teleport {_plane} to {_start}
		if y-coords of {_start} < {_oldY}:
			set {_calc} to {_oldY} - y-coords of {_start}
			add {_calc} to y-coords of {_start}
		if distance between {bg::arena::%{_arena}%::start::%{bg::arena::%{_arena}%::ROUTE}%} and {_plane} > {@allow-jump-after}:
			loop {bg::arena::%{_arena}%::cache::ninjas::*}:
				metadata value "BG-FLYING" of loop-value is set:	
					send title "&e" with subtitle "&ePRESS &bSNEAK &eTO OPEN PARACHUTE" to loop-value-1 with 0 fadein and 0 fadeout for 20		
		if distance between {_plane} and {bg::arena::%{_arena}%::end::%{bg::arena::%{_arena}%::ROUTE}%} < 50:
			bg_load_chunks({_start})
			wait a tick
			loop {bg::arena::%{_arena}%::cache::ninjas::*}:
				metadata value "BG-FLYING" of loop-value is set:
					bg_parachute(loop-value)	
			loop entities in radius 100 of {bg::arena::%{_arena}%::end::%{bg::arena::%{_arena}%::ROUTE}%}:
				metadata value "BG-PLANE" of loop-entity is "DRAGON":
					clear loop-entity	
			set {bg::arena::%{_arena}%::cache::status} to "INGAME"
			stop					
		wait a tick	

function bg_start(arena: text):
	set {bg::arena::%{_arena}%::cache::status} to "FLYING"
	set {bg::arena::%{_arena}%::ROUTE} to rounded random number between 1 and {bg::arena::%{_arena}%::route::id}-1
	set {_start} to {bg::arena::%{_arena}%::start::%{bg::arena::%{_arena}%::ROUTE}%}
	set {_end} to {bg::arena::%{_arena}%::end::%{bg::arena::%{_arena}%::ROUTE}%}	
	bg_delete_arena_entities({_arena})
	{_start}.getChunk().load()
	spawn an ender dragon at {_start}
	set {_plane} to spawned ender dragon
	if minecraft version contains "1.8":
		add "{Silent:1,NoGravity:1b,CustomName:""%yaml value ""settings.mix.dragon-name"" from ""leaf.bg.config""%"",DragonPhase:10}" to nbt of {_plane} 
	else:
		add "{Silent:1b,NoGravity:1b,Name:""%yaml value ""settings.mix.dragon-name"" from ""leaf.bg.config""%"",DragonPhase:0}" to nbt of {_plane} 
	set metadata value "BG-PLANE" of {_plane} to "DRAGON"		
	set {_w} to {bg::arena::%{_arena}%::center}'s world
	set {bg::arena::%{_arena}%::cache::border::current-size} to {bg::arena::%{_arena}%::border::first}
	set {bg::arena::%{_arena}%::cache::game-border} to a random element out of {bg::arena::%{_arena}%::borders::*}
	{_w}.getWorldBorder().setSize({bg::arena::%{_arena}%::cache::border::current-size})	
	{_w}.getWorldBorder().setCenter({bg::arena::%{_arena}%::cache::game-border})
	bg_start_border({_arena})	
	loop {bg::arena::%{_arena}%::cache::ninjas::*}:	
		bg_clear_player(loop-value)
		set loop-value's gamemode to spectator
	plane_start_route({_arena}, {_plane}, {_start}, {_end})			
	loop {bg::arena::%{_arena}%::cache::ninjas::*}:
		apply blindness without any particles to loop-value-1 for 3 seconds
		bg_createBoard(loop-value, "BG-GAME", 15)	
		apply invisibility without any particles to loop-value for 7 days
		loop-value-1.setAllowFlight(true)
		loop-value-1.setFlying(true)
		add 1 to {bg::stats::PlayedGames::%uuid of loop-value%}
		bg_player_track_plane(loop-value, {_arena}, {_start}, {_plane})				

function bg_clear_parachute(p: player):
	{_p}.setFlying(false)
	{_p}.setAllowFlight(false)
	teleport {_p} to block 1.5 above {_p}
	set {_w} to world of {_p}	
	set {_loc} to location of {_p}
	FastParticle.spawnParticle({_w}, ParticleType.EXPLOSION_HUGE, {_loc} and 1)
	delete metadata value "BG-PARACHUTE" of {_p}
	loop entities in radius 3 of {_p}:
		metadata value "BG-OWNER" of loop-entity is {_p}:
			clear loop-entity	

function bg_parachute(p: player):
	set {_uuid} to uuid of {_p}
	wait a tick
	delete metadata value "BG-FLYING" of {_p}
	set metadata value "BG-PARACHUTE" of {_p} to "SET"
	spawn an chicken at {_p}
	set {_base} to spawned chicken
	add "{Silent:1,NoGravity:1b,Invisible:1b}" to nbt of {_base}
	set metadata value "BG-OWNER" of {_base} to "%{_p}%"	
	spawn an armor stand at {_p}
	set {_left} to spawned armor stand	
	if {bg::stats::BANNER::left::%{_uuid}%} is set:	
		set {_left}'s helmet to {bg::stats::BANNER::left::%{_uuid}%}
	else:
		set {_left}'s helmet to {bg::banner}
	add "{Pose:{Head:[265f,94f,0f]},NoGravity:1b,Invisible:1b}" to nbt of {_left}
	spawn an armor stand at {_p}
	set {_right} to spawned armor stand
	if {bg::stats::BANNER::right::%{_uuid}%} is set:	
		set {_right}'s helmet to {bg::stats::BANNER::right::%{_uuid}%}
	else:
		set {_right}'s helmet to {bg::banner}
	add "{Pose:{Head:[265f,270f,0f]},NoGravity:1b,Invisible:1b}" to nbt of {_right}
	spawn an armor stand at {_p}		
	set {_center} to spawned armor stand	
	set {_center}'s helmet to fence gate
	add "{NoGravity:1b,Invisible:1b}" to nbt of {_center}
	make {_p} ride {_base}	
	set metadata value "BG-OWNER" of {_center} to "%{_p}%"
	set metadata value "BG-OWNER" of {_left} to "%{_p}%"
	set metadata value "BG-OWNER" of {_right} to "%{_p}%"		
	remove invisibility from {_p}
	set {_w} to world of {_p}
	while metadata value "BG-PARACHUTE" of {_p} is set:
		if {_base} is alive:
			{_base} is not on ground:
				teleport {_left} to {_p}
				teleport {_right} to {_p}
				teleport {_center} to {_p}
				add "{Rotation:[%{_p}'s yaw%f, %{_p}'s pitch%f]}" to nbt of {_base} 
				{_p}'s pitch < 70		
				{_p}'s pitch > -30
				push {_base} vector between {_p} and block in front of {_p} at speed 0.06
			push {_base} downwards at speed 0.06
			if block at {_p} != air:
				bg_clear_parachute({_p})
				stop	
			FastParticle.spawnParticle({_w}, ParticleType.FLAME, location of {_p} and 1)		
		else:
			stop
		wait a tick

on break:
	if {bg::cache::player::%player%::state} is "IN-GAME":
		if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "INGAME" or "FLYING":
			loop {bg::arena::blocks-to-break::cache::*}:
				loop-value is event-block 	
				if {bg::arena::%{bg::cache::player::%player%::arena}%::PLACED-BLOCKS::%location of event-block%} is set:
					delete {bg::arena::%{bg::cache::player::%player%::arena}%::PLACED-BLOCKS::%location of event-block%}
					stop
				if {bg::arena::%{bg::cache::player::%player%::arena}%::PLACED-BLOCKS::%location of event-block%} is not set:	
					set {bg::arena::%{bg::cache::player::%player%::arena}%::BROKEN-BLOCKS::%location of event-block%} to location of event-block
					set {bg::arena::%{bg::cache::player::%player%::arena}%::BROKEN-BLOCKS-TYPE::%location of event-block%} to type of event-block
				stop
			cancel event										
		else:
			cancel event
	
on place:
	if {bg::cache::player::%player%::state} is "IN-GAME":
		if {bg::arena::%{bg::cache::player::%player%::arena}%::cache::status} is "INGAME" or "FLYING":
			loop {bg::arena::blocks-to-place::cache::*}:
				loop-value is event-block 
				if {bg::arena::%{bg::cache::player::%player%::arena}%::PLACED-BLOCKS::%location of event-block%} is not set:
					set {bg::arena::%{bg::cache::player::%player%::arena}%::PLACED-BLOCKS::%location of event-block%} to location of event-block
				stop
			cancel event
		else:
			cancel event

function bg_start_countdown(arena: text):
	set {bg::arena::%{_arena}%::cache::status} to "STARTING"
	loop {bg::arena::%{_arena}%::cache::seconds} times:
		if {bg::arena::%{_arena}%::cache::status} is "STARTING" or "WAITING":
			size of {bg::arena::%{_arena}%::cache::ninjas::*} >= 2
			remove 1 from {bg::arena::%{_arena}%::cache::seconds}	
			if {bg::arena::%{_arena}%::cache::seconds} = 1 or 2 or 3 or 4 or 5 or 10:
				send replacer "{seconds}" with "%{bg::arena::%{_arena}%::cache::seconds}%" in yaml value "messages.starting" from "leaf.bg.config" to {bg::arena::%{_arena}%::cache::ninjas::*}	
			if {bg::arena::%{_arena}%::cache::seconds} = 1:
				size of {bg::arena::%{_arena}%::cache::ninjas::*} >= 2:
					bg_start({_arena})
				else:
					set {bg::arena::%{_arena}%::cache::status} to "WAITING"
					set {bg::arena::%{_arena}%::cache::seconds} to yaml value "settings.timers.in-lobby" from "leaf.bg.config"
			wait a second			
		else:
			stop
		
function bg_resetarena(arena: text):
	set {_w} to {bg::arena::%{_arena}%::center}'s world
	{_w}.getWorldBorder().reset()
	{_w}.getWorldBorder().setSize(10000)
	loop {bg::arena::%{_arena}%::cache::ninjas::*} and {bg::arena::%{_arena}%::cache::bad-ninjas::*}:
		delete {bg::cache::player::%loop-value-1%::*}		
		bg_clear_player(loop-value-1)
		delete scoreboard of loop-value-1
		teleport loop-value-1 to {bg::lobby}
	loop {bg::arena::%{_arena}%::cache::CHESTS::*}:
		clear inventory of block at loop-value
	loop {bg::arena::%{_arena}%::cache::KILL-ME-PLS::*}:
		set block at loop-value to air
		remove loop-value from {bg::arena::%{_arena}%::cache::KILL-ME-PLS::*}
	delete {bg::arena::%{_arena}%::cache::*}	
	bg_delete_arena_entities({_arena})
	loop {bg::arena::%{_arena}%::PLACED-BLOCKS::*}:
		set block at location of {bg::arena::%{_arena}%::PLACED-BLOCKS::%loop-index%} to air
		wait a tick
	loop {bg::arena::%{_arena}%::BROKEN-BLOCKS::*}:
		set block at location of {bg::arena::%{_arena}%::BROKEN-BLOCKS::%loop-index%} to {bg::arena::%{_arena}%::BROKEN-BLOCKS-TYPE::%loop-index%}
		wait a tick		
	delete {bg::arena::%{_arena}%::BROKEN-BLOCKS::*}
	delete {bg::arena::%{_arena}%::PLACED-BLOCKS::*}	
	set {bg::arena::%{_arena}%::cache::seconds} to yaml value "settings.timers.in-lobby" from "leaf.bg.config"
	set {bg::arena::%{_arena}%::cache::status} to "WAITING"
							
function bg_clear_player(p: player):						
	heal {_p}
	extinguish {_p}
	set {_p}'s food to 20	
	clear {_p}'s level
	clear {_p}'s inventory
	{_p}.setFlying(false)
	{_p}.setAllowFlight(false)	
	set {_p}'s gamemode to survival
	loop ...{_p}.getActivePotionEffects():
		{_p}.removePotionEffect(loop-value.getType())	
	set velocity of {_p} to new vector 0, 0, 0	
	loop "BG-FLYING" and "BG-PARACHUTE":
		delete metadata value "%loop-value-1%" of {_p}

function bg_get_direction(p: player, target: location) :: text:
	set {_vector} to {_target}.toVector().subtract({_p}.getLocation().toVector())
	set {_direction} to {_p}.getEyeLocation().getDirection()
	set {_angle} to {_vector}.angle({_direction})
	set {_r} to {_angle} * 180 / 3.14159265359
	set {_directions::*} to "⬆", "⬅", "⬇" and "➡"
	set {_values::*} to 45, 135, 225 and 315	
	loop {_values::*}:
		{_r} < loop-value
		if {_r} > 45:
			if {_r} <= 135:
				if {_vector}.crossProduct({_direction}).getY() > 0.0:
					return "➡"
				else:
					return "⬅"
		return {_directions::%loop-index%}	

function bg_setSlot(p: player, slot: integer, t: text):
	add "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f" to {_d::*}
	if {_slot} is between 1 and 15: 
		set scoreboard line {_slot} of {_p} to "%{_d::%{_slot}%}%%{_t}%"		
	
function bg_createBoard(p: player, t: text, size: integer = 15):
	set {_arena} to {bg::cache::player::%{_p}%::arena}
	create scoreboard for {_p}
	add "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f" to {_d::*}
	if {_t} is "BG-GAME":
		set scoreboard title of {_p} to yaml value "settings.scoreboard.name" from "leaf.bg.config"
		while {bg::cache::player::%{_p}%::arena} = {_arena}:	
			if {bg::arena::%{bg::cache::player::%{_p}%::arena}%::cache::status} is set:	
				set {_target} to {bg::arena::%{_arena}%::cache::game-border}
				if {bg::arena::%{_arena}%::cache::next-border} is "&cBORDER CLOSING":
					set {_distance-check} to {bg::arena::%{_arena}%::cache::border::current-size}/2
				else:
					set {_distance-check} to {bg::arena::%{_arena}%::cache::border::current-size}
				if distance between {_p} and {_target} < {_distance-check}:
					set {_status} to "&aSAFE"
					set {_color} to "&a"
				else:
					set {_status} to "&cNOT STAFE"
					set {_color} to "&7"
				set {_dir} to bg_get_direction({_p}, {bg::arena::%{_arena}%::cache::game-border})
				loop "⬆", "⬅", "⬇" and "➡":
					if loop-value-1 is {_dir}:
						set {_pointer.%loop-value-1%} to "&a%loop-value-1%"
					else:
						set {_pointer.%loop-value-1%} to "%{_color}%%loop-value-1%"
				bg_setSlot({_p}, 1, "&7%now%")
				bg_setSlot({_p}, 2, "")									
				bg_setSlot({_p}, 3, "&8▪ &fNext Border: %{bg::arena::%{_arena}%::cache::next-border}%")					
				bg_setSlot({_p}, 4, "&8▪ &fPlayers left &a%size of {bg::arena::%{_arena}%::cache::ninjas::*}%/100")		
				bg_setSlot({_p}, 5, "&8▪ &fKills &a%{bg::cache::player::%{_p}%::kills}%")
				bg_setSlot({_p}, 6, "")										
				bg_setSlot({_p}, 7, "   %{_pointer.⬆}%")						
				bg_setSlot({_p}, 8, "%{_pointer.⬅}%   %{_pointer.➡}% &fPlay zone")					
				bg_setSlot({_p}, 9, "   %{_pointer.⬇}%    %{_status}%")
				bg_setSlot({_p}, 10, "")					
				bg_setSlot({_p}, 11, "&c❤ &e%{_p}'s health% &f%{_p}'s displayname% &7(You)")				
				bg_setSlot({_p}, 12, "")											
				bg_setSlot({_p}, 13, "&8▪ &fSize %{bg::arena::%{_arena}%::cache::border::current-size}%x%{bg::arena::%{_arena}%::cache::border::current-size}%m")					
				bg_setSlot({_p}, 14, "")	
				bg_setSlot({_p}, 15, "%yaml value ""settings.scoreboard.website"" from ""leaf.bg.config""%")	
			else:
				stop							
			wait a second
	if {_t} is "BG-WAITING":
		set scoreboard title of {_p} to yaml value "settings.scoreboard.name" from "leaf.bg.config"
		while {bg::cache::player::%{_p}%::arena} = {_arena}:	
			if {bg::arena::%{bg::cache::player::%{_p}%::arena}%::cache::status} = "STARTING" or "WAITING":
				bg_setSlot({_p}, 1, "&7%now%")
				bg_setSlot({_p}, 2, "")					
				bg_setSlot({_p}, 3, "&8▪ &fStarting in &a%{bg::arena::%{_arena}%::cache::seconds}%")				
				bg_setSlot({_p}, 4, "")						
				bg_setSlot({_p}, 5, "&8▪ &fPlayers &a%size of {bg::arena::%{_arena}%::cache::ninjas::*}%/100")					
				bg_setSlot({_p}, 6, "")	
				bg_setSlot({_p}, 7, "&8▪ &fArena &a%{bg::cache::player::%{_p}%::arena}%")	
				bg_setSlot({_p}, 8, "")									
				bg_setSlot({_p}, 9, "%yaml value ""settings.scoreboard.website"" from ""leaf.bg.config""%")	
			else:
				stop				
			wait a second		
				

#El Psy Kongroo